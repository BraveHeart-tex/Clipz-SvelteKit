generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @unique
  email                String                 @unique
  profile_picture      String?                @db.LongText
  email_verified       Boolean                @default(false)
  name                 String?
  auth_session         Session[]
  key                  Key[]
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  Video                Video[]
  isAdmin              Boolean                @default(false)
  Ticket               Ticket[]
  FCM_Token            FCM_Token[]
  Notification         Notification[]
  NotificationSettings NotificationSettings[]
  Like                 Like[]
  Comment              Comment[]
  SavedVideo           Save[]
  Share                Share[]

  @@map("tbl_user")
}

model NotificationSettings {
  id                          String  @id @unique @default(cuid())
  allow_notifications         Boolean @default(true)
  allow_mention_notification  Boolean @default(false)
  allow_reaction_notification Boolean @default(false)
  user_id                     String  @unique
  user                        User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("tbl_notification_settings")
}

model Notification {
  id          String    @id @unique @default(cuid())
  user_id     String
  user        User      @relation(references: [id], fields: [user_id], onDelete: Cascade)
  title       String
  description String
  created_at  DateTime  @default(now())
  read_date   DateTime?

  @@map("tbl_notification")
}

model Email_Verification_Token {
  id      String @id @unique
  expires BigInt
  user_id String

  @@index([user_id])
  @@map("tbl_email_verification_token")
}

model Reset_Password_Token {
  id      String @id @unique
  expires BigInt
  user_id String @unique

  @@index([user_id])
  @@map("tbl_reset_password_token")
}

model Video {
  id               String       @id @default(cuid())
  title            String
  description      String?
  url              String       @db.LongText
  poster_url       String?      @db.LongText
  user_id          String
  user             User         @relation(references: [id], fields: [user_id], onDelete: Cascade)
  rejection_reason String?      @db.LongText
  status           VideoStatus  @default(PENDING_REVIEW)
  topic            TicketTopics @default(OTHER)
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  views            Int          @default(0)
  Like             Like[]
  Comment          Comment[]
  SavedVideo       Save[]
  SharedVideo      Share[]

  @@map("tbl_video")
}

model Like {
  id      String @id @default(cuid())
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@map("tbl_like")
}

model Comment {
  id      String @id @default(cuid())
  text    String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@map("tbl_comment")
}

model Save {
  id      String @id @default(cuid())
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@map("tbl_save")
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TicketStatus @default(PENDING)
  user_id     String
  user        User         @relation(references: [id], fields: [user_id], onDelete: Cascade)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@map("tbl_ticket")
}

model Share {
  id      String @id @default(cuid())
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@map("tbl_share")
}

model FCM_Token {
  id         String @id @unique
  user_id    String
  user       User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  valid_till BigInt

  @@index([user_id])
  @@index([id])
  @@map("tbl_fcm_token")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("tbl_session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("tbl_key")
}

enum VideoStatus {
  PENDING_REVIEW
  PUBLISHED
  REJECTED
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum TicketTopics {
  ACCOUNT
  VIDEO
  OTHER
}
