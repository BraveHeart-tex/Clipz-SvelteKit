generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @unique
  email        String    @unique
  name         String?
  auth_session Session[]
  key          Key[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  Video        Video[]
  isAdmin      Boolean   @default(false)
  Ticket       Ticket[]

  @@map("tbl_users")
}

model Video {
  id              String       @id @default(cuid())
  title           String
  description     String?
  url             String       @db.LongText
  poster_url      String?      @db.LongText
  user_id         String
  user            User         @relation(references: [id], fields: [user_id], onDelete: Cascade)
  rejectionReason String?      @db.LongText
  status          VideoStatus  @default(PENDING_REVIEW)
  topic           TicketTopics @default(OTHER)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  views           Int          @default(0)
  Ticket          Ticket[]

  @@map("tbl_videos")
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TicketStatus @default(PENDING)
  user_id     String
  video_id    String?
  video       Video?       @relation(references: [id], fields: [video_id], onDelete: Cascade)
  user        User         @relation(references: [id], fields: [user_id], onDelete: Cascade)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@map("tbl_tickets")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("tbl_sessions")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("tbl_keys")
}

enum VideoStatus {
  PENDING_REVIEW
  PUBLISHED
  REJECTED
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum TicketTopics {
  ACCOUNT
  VIDEO
  OTHER
}
